# pyproject.toml - Comprehensive configuration for VanillaOptionPricers package
# Modern Python packaging configuration replacing setup.py

[build-system]
requires = ["poetry-core>=1.0.0", "hatchling==1.27.0", "hatch-vcs"]
build-backend = "setuptools.build_meta"

[project]
name = "vanilla-option-pricers"
version = "1.2.1"
description = "Fast and vectorised pricer and implied volatility fitters for Black-Scholes and Merton models"
readme = "README.md"
license = {file = "LICENSE.txt"}
authors = [
    {name = "Artur Sepp", email = "artursepp@gmail.com"}
]
maintainers = [
    {name = "Artur Sepp", email = "artursepp@gmail.com"}
]
keywords = [
    "option pricing",
    "black-scholes",
    "merton model",
    "implied volatility",
    "vanilla options",
    "financial derivatives",
    "quantitative finance",
    "fast pricing",
    "vectorised computation",
    "options analytics",
    "mathematical finance",
    "european options",
    "american options",
    "option greeks",
    "risk management",
    "numba optimization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"

# Core dependencies - always required for vanilla-option-pricers to function
dependencies = [
    "numba>=0.60.0",
    "numpy==2.2.6"  # for numba>=0.60.0
]

[project.optional-dependencies]
# Enhanced analytics and data manipulation
analytics = [
    "pandas>=2.3.1",
    "statsmodels>=0.14.0",
]

# Report generation and document export
reports = [
    "pybloqs>=1.2.13",
    "jinja2>=3.0.0",
    "openpyxl>=3.1.0",
    "tabulate>=0.9.0",
]

# Enhanced visualization and interactive plots
visualization = [
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    "plotly>=5.0.0",
]

# Jupyter notebook support and interactive development
jupyter = [
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
    "jupyterlab>=3.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=8.0.0",
]

# Development tools and testing
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "isort>=5.10.0",
    "pre-commit>=3.0.0",
]

# Performance profiling and optimization
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "scalene>=1.5.0",
]

# Database connectivity for storing pricing results
database = [
    "SQLAlchemy>=2.0.0",
    "psycopg2>=2.9.5",
    "pyarrow>=18.0.0",
    "fsspec>=2024.12.0",
]

# Integration with other finance packages
finance = [
    "qis>=3.2.22",
    "yfinance>=0.2.65",
    "pandas-datareader>=0.10.0",
]

# All optional dependencies combined
all = [
    "vanilla-option-pricers[analytics,reports,visualization,jupyter,performance,database,finance]"
]

# Minimal additional packages for most users
extras = [
    "vanilla-option-pricers[analytics,visualization]"
]

[project.urls]
Homepage = "https://github.com/ArturSepp/VanillaOptionPricers"
Documentation = "https://github.com/ArturSepp/VanillaOptionPricers/blob/main/README.md"
Repository = "https://github.com/ArturSepp/VanillaOptionPricers.git"
Issues = "https://github.com/ArturSepp/VanillaOptionPricers/issues"
Changelog = "https://github.com/ArturSepp/VanillaOptionPricers/blob/main/CHANGELOG.md"
PyPI = "https://pypi.org/project/vanilla-option-pricers/"

# Version is now manually set in [project] section above

# Package discovery configuration
[tool.setuptools.packages.find]
include = ["vanilla_option_pricers*"]
exclude = [
    "tests*",
    "docs*",
    "vanilla_option_pricers.examples.figures*",
    "notebooks*"
]

# Include additional files in the package
[tool.setuptools.package-data]
vanilla_option_pricers = [
    "*.txt",
    "*.md",
    "*.yml",
    "*.yaml",
    "*.json",
    "data/*.csv",
    "templates/*.html",
    "static/*.css",
    "static/*.js"
]

# Explicitly exclude files from the package
[tool.setuptools.exclude-package-data]
"*" = [
    "*/examples/figures/*",
    "*/figures/*",
    "*.png",
    "*.jpg",
    "*.jpeg",
    "*.gif",
    "*.svg"
]

# Black code formatting configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "black_scholes: marks tests for Black-Scholes model",
    "merton: marks tests for Merton model",
    "implied_vol: marks tests for implied volatility calculations",
    "greeks: marks tests for option greeks calculations",
    "vectorized: marks tests for vectorized operations",
    "performance: marks performance benchmarking tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["vanilla_option_pricers"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 linting configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
]
